Index: app/src/main/java/com/example/playlistmaker/TrackAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.playlistmaker\r\n\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.bumptech.glide.Glide\r\nimport com.bumptech.glide.load.resource.bitmap.RoundedCorners\r\nimport com.bumptech.glide.request.RequestOptions\r\nimport java.text.SimpleDateFormat\r\nimport java.util.Locale\r\n\r\nclass TrackAdapter(private var tracks: List<Track>) : RecyclerView.Adapter<TrackAdapter.TrackViewHolder>() {\r\n\r\n    class TrackViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView) {\r\n        private val trackName: TextView = itemView.findViewById(R.id.trackName)\r\n        private val artistName: TextView = itemView.findViewById(R.id.artistName)\r\n        private val trackTime: TextView = itemView.findViewById(R.id.trackTime)\r\n        private val trackImage: ImageView = itemView.findViewById(R.id.trackImage)\r\n\r\n        fun bind(song: Track) {\r\n            trackName.text = song.trackName\r\n            artistName.text = song.artistName\r\n            trackTime.text = SimpleDateFormat(\"mm:ss\", Locale.getDefault()).format(293000L)\r\n            Glide.with(itemView.context)\r\n                .load(song.artworkUrl100)\r\n                .placeholder(R.drawable.placeholder)\r\n                .error(R.drawable.placeholder)\r\n                .into(trackImage)\r\n        }\r\n    }\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): TrackViewHolder {\r\n        val view = LayoutInflater.from(parent.context).inflate(R.layout.track_maket, parent, false)\r\n        return TrackViewHolder(view)\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: TrackViewHolder, position: Int) {\r\n        holder.bind(tracks[position])\r\n    }\r\n\r\n    override fun getItemCount() = tracks.size\r\n\r\n    fun updateData(newTracks: List<Track>) {\r\n        tracks = newTracks\r\n        notifyDataSetChanged()\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/playlistmaker/TrackAdapter.kt b/app/src/main/java/com/example/playlistmaker/TrackAdapter.kt
--- a/app/src/main/java/com/example/playlistmaker/TrackAdapter.kt	(revision eadec244d577bf2fe5ccc72ae6238ffb30f53d89)
+++ b/app/src/main/java/com/example/playlistmaker/TrackAdapter.kt	(date 1733346452034)
@@ -7,8 +7,6 @@
 import android.widget.TextView
 import androidx.recyclerview.widget.RecyclerView
 import com.bumptech.glide.Glide
-import com.bumptech.glide.load.resource.bitmap.RoundedCorners
-import com.bumptech.glide.request.RequestOptions
 import java.text.SimpleDateFormat
 import java.util.Locale
 
Index: app/src/main/java/com/example/playlistmaker/SearchActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.playlistmaker\r\n\r\nimport android.content.Context\r\nimport android.net.ConnectivityManager\r\nimport android.net.NetworkInfo\r\nimport android.os.Bundle\r\nimport android.text.Editable\r\nimport android.text.TextWatcher\r\nimport android.view.View\r\nimport android.view.inputmethod.InputMethodManager\r\nimport android.widget.Button\r\nimport android.widget.EditText\r\nimport android.widget.ImageView\r\nimport android.widget.LinearLayout\r\nimport android.widget.ProgressBar\r\nimport android.widget.TextView\r\nimport androidx.activity.enableEdgeToEdge\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.content.ContextCompat\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.android.material.appbar.MaterialToolbar\r\nimport retrofit2.Call\r\n\r\nclass SearchActivity : AppCompatActivity() {\r\n    private lateinit var searchEditText: EditText\r\n    private lateinit var clearButton: ImageView\r\n    private lateinit var goBackButton: MaterialToolbar\r\n    private lateinit var recyclerView: RecyclerView\r\n    private lateinit var adapter: TrackAdapter\r\n    private lateinit var placeholderText: TextView\r\n    private lateinit var errorPlaceHolder: LinearLayout\r\n    private lateinit var retryButton: Button\r\n    private lateinit var emptyPlaceholder: LinearLayout\r\n    private var searchText: String = \"\"\r\n    private val filteredTracks = ArrayList<Track>()\r\n    private lateinit var progressBar: ProgressBar\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_search)\r\n        enableEdgeToEdge()\r\n\r\n        //RV\r\n        recyclerView = findViewById(R.id.searchRecyclerView)\r\n        recyclerView.layoutManager = LinearLayoutManager(this)\r\n        adapter = TrackAdapter(filteredTracks)\r\n        recyclerView.adapter = adapter\r\n        //Плейсхолдер с ошибкой и кнопкой\r\n        errorPlaceHolder = findViewById(R.id.errorPlaceholder)\r\n        retryButton = findViewById(R.id.retryButton)\r\n        //Основная вью с поиском\r\n        searchEditText = findViewById(R.id.searchEditText)\r\n        clearButton = findViewById(R.id.clearButton)\r\n        goBackButton = findViewById(R.id.goBackButton)\r\n        emptyPlaceholder = findViewById(R.id.emptyPlaceholder)\r\n        progressBar = findViewById(R.id.progressBar)\r\n\r\n\r\n\r\n        searchEditText.textCursorDrawable = ContextCompat.getDrawable(this, R.drawable.custom_cursor)\r\n\r\n\r\n        goBackButton.setNavigationOnClickListener { finish() }\r\n\r\n        searchEditText.addTextChangedListener(object : TextWatcher {\r\n            override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}\r\n            override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {\r\n                searchText = s.toString()\r\n                clearButton.visibility = if (s.isNullOrEmpty()) View.GONE else View.VISIBLE\r\n                if (searchText.isNotEmpty()) {\r\n                    searchSongs(searchText)\r\n                } else {\r\n                    hideResultsAndPlaceholders()\r\n                }\r\n            }\r\n            override fun afterTextChanged(s: Editable?) {}\r\n        })\r\n\r\n\r\n\r\n        clearButton.setOnClickListener {\r\n            searchEditText.text.clear()\r\n            clearButton.visibility = View.GONE\r\n            searchEditText.clearFocus()\r\n            val imm = getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager\r\n            imm.hideSoftInputFromWindow(searchEditText.windowToken, 0)\r\n        }\r\n\r\n\r\n        retryButton.setOnClickListener {\r\n            if (searchText.isNotEmpty()) {\r\n                searchSongs(searchText)\r\n            }\r\n        }\r\n\r\n        savedInstanceState?.let {\r\n            searchText = it.getString(\"SEARCH_TEXT\", \"\") ?: \"\"\r\n            searchEditText.setText(searchText)\r\n            searchSongs(searchText)\r\n        }\r\n    }\r\n\r\n    override fun onSaveInstanceState(outState: Bundle) {\r\n        super.onSaveInstanceState(outState)\r\n        outState.putString(\"SEARCH_TEXT\", searchText)\r\n    }\r\n\r\n    private fun searchSongs(query: String) {\r\n        if (!isConnectedToInternet()) {\r\n            showErrorPlaceholder()\r\n            return\r\n        }\r\n        showLoader()\r\n        RetrofitInstance.apiService.searchSongs(query).enqueue(object : retrofit2.Callback<SearchResponse> {\r\n            override fun onResponse(\r\n                call: Call<SearchResponse>,\r\n                response: retrofit2.Response<SearchResponse>\r\n            ) {\r\n                hideLoader()\r\n                if (response.isSuccessful) {\r\n                    val body = response.body()\r\n                    val songs = body?.results ?: emptyList()\r\n                    if (songs.isEmpty()) {\r\n                        showEmptyPlaceholder()\r\n                    } else {\r\n                        showResults(songs)\r\n                    }\r\n                } else {\r\n                    showErrorPlaceholder()\r\n                }\r\n            }\r\n\r\n            override fun onFailure(call: Call<SearchResponse>, t: Throwable) {\r\n                hideLoader()\r\n                showErrorPlaceholder()\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun isConnectedToInternet(): Boolean {\r\n        val connectivityManager = getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\r\n        val activeNetwork : NetworkInfo? = connectivityManager.activeNetworkInfo\r\n        return activeNetwork?.isConnected == true\r\n    }\r\n\r\n    private fun showResults(songs: List<Track>) {\r\n        recyclerView.visibility = View.VISIBLE\r\n        errorPlaceHolder.visibility = View.GONE\r\n        emptyPlaceholder.visibility = View.GONE\r\n\r\n        filteredTracks.clear()\r\n        filteredTracks.addAll(songs)\r\n        adapter.notifyDataSetChanged()\r\n    }\r\n\r\n    private fun showErrorPlaceholder() {\r\n        recyclerView.visibility = View.GONE\r\n        errorPlaceHolder.visibility = View.VISIBLE\r\n        emptyPlaceholder.visibility = View.GONE\r\n    }\r\n\r\n    private fun showEmptyPlaceholder() {\r\n        recyclerView.visibility = View.GONE\r\n        errorPlaceHolder.visibility = View.GONE\r\n        emptyPlaceholder.visibility = View.VISIBLE\r\n    }\r\n\r\n    private fun showLoader() {\r\n        progressBar.visibility = View.VISIBLE\r\n        recyclerView.visibility = View.GONE\r\n        emptyPlaceholder.visibility = View.GONE\r\n        errorPlaceHolder.visibility = View.GONE\r\n    }\r\n\r\n    private fun hideLoader() {\r\n        progressBar.visibility = View.GONE\r\n    }\r\n    private fun hideResultsAndPlaceholders() {\r\n        recyclerView.visibility = View.GONE\r\n        errorPlaceHolder.visibility = View.GONE\r\n        emptyPlaceholder.visibility = View.GONE\r\n        progressBar.visibility = View.GONE\r\n        filteredTracks.clear()\r\n        adapter.notifyDataSetChanged()\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/playlistmaker/SearchActivity.kt b/app/src/main/java/com/example/playlistmaker/SearchActivity.kt
--- a/app/src/main/java/com/example/playlistmaker/SearchActivity.kt	(revision eadec244d577bf2fe5ccc72ae6238ffb30f53d89)
+++ b/app/src/main/java/com/example/playlistmaker/SearchActivity.kt	(date 1733346858616)
@@ -57,11 +57,8 @@
         emptyPlaceholder = findViewById(R.id.emptyPlaceholder)
         progressBar = findViewById(R.id.progressBar)
 
-
-
         searchEditText.textCursorDrawable = ContextCompat.getDrawable(this, R.drawable.custom_cursor)
 
-
         goBackButton.setNavigationOnClickListener { finish() }
 
         searchEditText.addTextChangedListener(object : TextWatcher {
@@ -79,7 +76,6 @@
         })
 
 
-
         clearButton.setOnClickListener {
             searchEditText.text.clear()
             clearButton.visibility = View.GONE
@@ -88,7 +84,6 @@
             imm.hideSoftInputFromWindow(searchEditText.windowToken, 0)
         }
 
-
         retryButton.setOnClickListener {
             if (searchText.isNotEmpty()) {
                 searchSongs(searchText)
